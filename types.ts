
import type { User as SupabaseUser, Session as SupabaseSession } from '@supabase/supabase-js';

export { SupabaseUser, SupabaseSession };

export enum TransactionType {
  INCOME = 'INCOME',
  EXPENSE = 'EXPENSE',
  TRANSFER = 'TRANSFER',
}

// Base type for Supabase table items
interface SupabaseManaged {
  id: string; // UUID, generated by Supabase
  user_id: string; // UUID, references auth.users.id
  profile_id: string; // UUID, references user_profiles.id
  created_at: string; // ISOString, from Supabase
  updated_at: string; // ISOString, from Supabase
}

export interface Transaction extends SupabaseManaged {
  type: TransactionType;
  amount: number; // Always positive
  category_id?: string; // UUID, references categories.id
  description?: string;
  date: string; // YYYY-MM-DD
  account_id: string; // UUID, references accounts.id OR credit_cards.id
  to_account_id?: string; // UUID, For TRANSFER type, references accounts.id
  payee_name?: string; // For TRANSFER type to an external person/entity
  tag_ids?: string[]; // Array of UUIDs, references tags.id
}

export interface Account extends SupabaseManaged {
  name: string;
  initial_balance: number; // Column name in DB: initial_balance
}

export interface Category extends SupabaseManaged {
  name: string;
  type: TransactionType.INCOME | TransactionType.EXPENSE;
  monthly_budget?: number; // Column name in DB: monthly_budget
}

export interface CreditCard extends SupabaseManaged {
  name: string;
  card_limit: number; // Column name in DB: card_limit
  closing_day: number; // Column name in DB: closing_day
  due_day: number; // Column name in DB: due_day
}

export interface InstallmentPurchase extends SupabaseManaged {
  credit_card_id: string; // UUID, references credit_cards.id
  description: string;
  purchase_date: string; // YYYY-MM-DD
  total_amount: number;
  number_of_installments: number;
  installments_paid: number;
  linked_transaction_id?: string; // UUID, references transactions.id (for direct card debits)
  linked_installment_purchase_id?: string; // UUID, references another installment_purchase.id (e.g. if this IP was created to fund a Loan)
}

export interface MoneyBox extends SupabaseManaged {
  name: string;
  goal_amount?: number;
  icon?: string;
  color?: string;
}

export enum MoneyBoxTransactionType {
  DEPOSIT = 'DEPOSIT',
  WITHDRAWAL = 'WITHDRAWAL',
}

export interface MoneyBoxTransaction extends SupabaseManaged {
  money_box_id: string; // UUID, references money_boxes.id
  type: MoneyBoxTransactionType;
  amount: number;
  date: string; // YYYY-MM-DD
  description?: string;
  linked_transaction_id?: string; // UUID, references transactions.id
}

export interface Tag extends SupabaseManaged {
  name: string;
  color?: string;
}

export type RecurringTransactionFrequency = 'daily' | 'weekly' | 'monthly' | 'yearly' | 'custom_days';

export interface RecurringTransaction extends SupabaseManaged {
  description: string;
  amount: number;
  type: TransactionType;
  category_id?: string; // UUID
  account_id: string; // UUID
  to_account_id?: string; // UUID
  frequency: RecurringTransactionFrequency;
  custom_interval_days?: number;
  start_date: string; // YYYY-MM-DD
  end_date?: string; // YYYY-MM-DD, optional
  occurrences?: number;
  remaining_occurrences?: number;
  next_due_date: string; // YYYY-MM-DD, calculated
  last_posted_date?: string; // YYYY-MM-DD
  is_paused?: boolean;
  notes?: string;
}

export interface LoanRepayment extends SupabaseManaged {
  loan_id: string; // UUID, references loans.id
  repayment_date: string; // YYYY-MM-DD
  amount_paid: number;
  notes?: string;
  credited_account_id: string; // UUID, references accounts.id
  linked_income_transaction_id?: string; // UUID, references transactions.id
}

export type LoanStatus = 'PENDING' | 'PARTIALLY_PAID' | 'PAID'; // This remains a derived status, not stored in DB

export interface Loan extends SupabaseManaged {
  person_name: string;
  description?: string;
  loan_date: string; // YYYY-MM-DD
  total_amount_to_reimburse: number;

  funding_source: 'account' | 'creditCard';

  amount_delivered_from_account?: number;
  linked_account_id?: string; // UUID
  linked_expense_transaction_id?: string; // UUID

  amount_delivered_from_credit?: number;
  cost_on_credit_card?: number;
  linked_credit_card_id?: string; // UUID
  linked_installment_purchase_id?: string; // UUID
}

// AI Coach Types
export interface AIConfig { // This is derived from UserPreferences
  isEnabled: boolean;
  apiKeyStatus: 'unknown' | 'available' | 'unavailable' | 'error';
  monthlyIncome?: number | null;
  autoBackupToFileEnabled?: boolean;
}

export type AIInsightType =
  | 'general_advice'
  | 'transaction_comment'
  | 'budget_warning'
  | 'spending_suggestion'
  | 'budget_recommendation'
  | 'goal_update'
  | 'future_purchase_advice'
  | 'best_purchase_day_advice'
  | 'spending_anomaly_category'
  | 'budget_overspend_projection'
  | 'recurring_payment_candidate'
  | 'saving_opportunity_suggestion'
  | 'unusual_transaction_value'
  | 'cash_flow_projection'
  | 'debt_strategy_explanation'
  | 'debt_projection_summary'
  | 'safe_to_spend_today_advice'
  | 'debt_analysis' // New insight type for storing debt analysis
  | 'debt_rate_analysis' // For specific rate analysis
  | 'debt_viability_analysis' // For specific viability analysis
  | 'error_message';

export interface AIInsight extends SupabaseManaged {
  timestamp: string; // ISO string
  type: AIInsightType;
  content: string;
  related_transaction_id?: string; // UUID
  related_money_box_id?: string; // UUID
  related_category_id?: string; // UUID
  related_future_purchase_id?: string; // UUID
  related_credit_card_id?: string; // UUID
  related_debt_id?: string; // UUID (for debt-related insights)
  related_debt_strategy?: DebtStrategy; // (for strategy explanations)
  is_read: boolean;
  isLoading?: boolean; // Purely client-side state, not in DB
}

export interface BestPurchaseDayInfo {
  bestPurchaseDay: string;
  paymentDueDate: string;
  explanation: string;
  error?: string;
}

// User Preferences stored in Supabase
// Now extends SupabaseManaged, so id, user_id, profile_id, created_at, updated_at are inherited.
export interface UserPreferences extends SupabaseManaged {
  theme: Theme;
  is_privacy_mode_enabled: boolean;
  ai_is_enabled: boolean;
  ai_monthly_income: number | null;
  ai_auto_backup_enabled: boolean;
  is_onboarding_completed: boolean;
}


// Future Purchases Types
export type FuturePurchaseStatus =
  | 'PLANNED'
  | 'CONSIDERING'
  | 'ACHIEVABLE_SOON'
  | 'NOT_RECOMMENDED_NOW'
  | 'AI_ANALYZING';

export type FuturePurchasePriority = 'low' | 'medium' | 'high';

export interface FuturePurchase extends SupabaseManaged {
  name: string;
  estimated_cost: number;
  priority: FuturePurchasePriority;
  notes?: string;
  status: FuturePurchaseStatus;
  ai_analysis?: string;
  ai_analyzed_at?: string; // ISOString
}

// Debt Planner Types
export type DebtType = 'credit_card_balance' | 'personal_loan' | 'student_loan' | 'mortgage' | 'car_loan' | 'consignado' | 'other';

export interface Debt extends SupabaseManaged {
  name: string;
  type: DebtType;
  initial_balance: number;
  current_balance: number; // This will be managed by the app
  interest_rate_annual: number; // Annual percentage rate, e.g., 19.9 for 19.9%
  minimum_payment: number;
  debt_date: string; // YYYY-MM-DD - The date the debt was incurred
  due_date_day_of_month?: number; // e.g., 15 for 15th of month
  is_archived: boolean; // To hide paid-off or irrelevant debts
  linked_income_transaction_id?: string; // Optional FK to Transaction (if an income was auto-created)
}

export interface DebtPayment extends SupabaseManaged {
  debt_id: string; // FK to Debt
  payment_date: string; // YYYY-MM-DD
  amount_paid: number;
  notes?: string;
  linked_expense_transaction_id?: string; // FK to Transaction (optional)
}

export type DebtStrategy = 'snowball' | 'avalanche' | 'minimums';

export interface DebtPayoffDetail {
  debtId: string;
  monthsToPayoffThisDebt: number;
  interestPaidThisDebt: number;
  principalPaidThisDebt: number;
  monthlyPayments: { month: number; payment: number; interest: number; principal: number; remainingBalance: number }[];
}

export interface DebtProjection {
  strategy: DebtStrategy;
  monthsToPayoff: number;
  totalInterestPaid: number;
  totalPrincipalPaid: number;
  totalPaid: number;
  payoffDetails: DebtPayoffDetail[];
  monthlyTotalBalanceLog: { month: number; totalBalance: number }[];
}

// For DebtFormModal calculation display
export interface DebtCalculationResult {
  monthsToPayoff: number;
  totalInterestPaid: number;
  monthlyPaymentsLog: { month: number; remainingBalance: number }[];
}

// For AI analysis in DebtFormModal
export interface DebtRateAnalysis {
  classification: 'razo√°vel' | 'moderado' | 'abusivo';
  text: string;
}

export interface DebtViabilityAnalysis {
  viability: string;
  risk: string;
  riskBadge: 'healthy' | 'alert' | 'critical';
  recommendation: string;
}


export interface SimulatedTransactionForProjection {
  description?: string;
  amount: number;
  type: TransactionType;
  date: string;
}

export interface SafeToSpendTodayInfo { // For AI response
  safeAmount: number | null;
  explanation: string;
  calculationDate: string; // YYYY-MM-DD
  error?: string | null;
}

export interface SafeToSpendTodayState extends SafeToSpendTodayInfo { // For App.tsx state
  isLoading: boolean;
  lastCalculatedDisplay: string | null; // Formatted for display
}


export type AppView =
  | 'LOGIN'
  | 'DASHBOARD'
  | 'TRANSACTIONS'
  | 'ACCOUNTS'
  | 'CATEGORIES'
  | 'CREDIT_CARDS'
  | 'MONEY_BOXES'
  | 'FUTURE_PURCHASES'
  | 'TAGS'
  | 'RECURRING_TRANSACTIONS'
  | 'LOANS'
  | 'DEBT_PLANNER'
  | 'CASH_FLOW'
  | 'AI_COACH'
  | 'AJUDE_PROJETO';

export interface ChartData {
  name: string; // Typically represents a category name or a date string
  value: number; // The primary value for this data point (e.g., total expense amount)
  value2?: number; // Optional secondary value (e.g., total income amount for comparison)
  fill?: string; // Optional color for this data point in charts
}


export type Theme = 'light' | 'dark' | 'system';

export type ToastType = 'info' | 'success' | 'warning' | 'error';

export interface ToastMessage {
  id: string;
  message: string;
  type: ToastType;
  duration?: number;
}

export interface UserProfile { // This table is special, it links user to their profiles
  id: string; // PK for user_profiles table
  user_id: string; // FK to auth.users.id
  name: string;
  created_at?: string; // Supabase managed
  updated_at?: string; // Supabase managed
}

export type AuthModalType = 'none' | 'signup' | 'forgotPassword' | 'resetPassword';

// Payload for transactions involving a MoneyBox, submitted from TransactionForm
export interface MoneyBoxRelatedTransactionData {
  type: TransactionType.INCOME | TransactionType.EXPENSE; // Transfers disallowed when MoneyBox is source
  amount: number;
  category_id?: string;
  description?: string;
  date: string; // YYYY-MM-DD
  tag_ids?: string[];

  isMoneyBoxTransaction: true;
  moneyBoxId: string;
  backingAccountId: string; // The actual account for the main transaction record

  // For updates, if applicable (simplified for now, main transaction edit won't auto-adjust MBT)
  id?: string; // id of the main transaction if updating
}
